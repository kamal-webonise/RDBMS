CREATE DEFINER=`root`@`localhost` PROCEDURE `payment_call`(IN ids int ,IN orderId int,IN paymentType varchar(20),IN discountCoupon int,IN paymentDate date, IN paymentStatus varchar(20),IN Created date)
BEGIN  

DECLARE userId INTEGER;
DECLARE orderIds INTEGER;
DECLARE colorId INTEGER;
DECLARE productId INTEGER;
DECLARE quant INTEGER;

DECLARE roll_back INTEGER DEFAULT 0;
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET roll_back = 1;

start transaction;

insert into payment(id,order_id,payment_type,discount_coupon,payment_date,payment_status,created) values(ids,orderId,paymentType,discountCoupon,paymentDate,paymentStatus,Created);

call cost_setter();

select carts.user_id,carts.order_id,carts.color_id,carts.product_id,carts.product_quantity into 
userId,orderIds,colorId,productId,quant from carts where order_id=orderId;

delete from carts where carts.order_id = orderId;
 
insert into order_history (user_id,order_id,color_id,product_id,product_quantity) values 
(userId,orderIds,colorId,productId,quant);

if roll_back then
    select(roll_back);
    rollback;
   
else

    select(roll_back);
    commit;
end if;

END ;;
DELIMITER ;









































DROP PROCEDURE IF EXISTS cost_setter $$
CREATE PROCEDURE cost_setter()

BEGIN

DECLARE total_sum  INTEGER;
DECLARE order_count INTEGER;
DECLARE itr INTEGER;
DECLARE discount INTEGER;
DECLARE pay INTEGER; 
DECLARE discount_amout INTEGER;

set order_count = (select count(*) from orders);
set itr=1;

while(itr <= order_count) do

select sum(carts.product_quantity * variants.price) into total_sum from carts,variants where carts.color_id = variants.id and carts.user_id = itr;

update orders set final_cost = total_sum where id = itr;

 


set discount = (select discount_coupon from payment where id=itr);

set discount_amout = ((discount/100)*total_sum);


select total_sum,discount_amout ;
set pay=(total_sum - discount_amout);
select pay,itr;
update payment set checkout_amount = pay where order_id =  itr   ;


set itr=itr+1; 
END WHILE ;

END$$



DROP PROCEDURE IF EXISTS cost_setter $$
CREATE PROCEDURE cost_setter()

BEGIN

DECLARE total_sum  INTEGER;
DECLARE order_count INTEGER;
DECLARE itr INTEGER;
DECLARE discount INTEGER;
DECLARE pay INTEGER; 
DECLARE discount_amout INTEGER;

set order_count = (select count(*) from orders);
set itr=1;

while(itr <= order_count) do

select sum(carts.product_quantity * variants.price) into total_sum from carts,variants where carts.color_id = variants.id and carts.user_id = itr;

update orders set final_cost = total_sum where id = itr;

 

set discount = (select discount_coupon from payment where id=itr);

set discount_amout = ((discount/100)*total_sum);


select total_sum,discount_amout ;
set pay=(total_sum - discount_amout);
select pay,itr;
update payment set checkout_amount = pay where order_id =  itr   ;


set itr=itr+1; 
END WHILE ;

END$$







create view order_detail as 
select orders.id,orders.final_cost,payment.checkout_amount,payment.payment_type,payment.payment_status from payment left join orders on orders.id=payment.order_id;


DELIMITER $$


create view monthly_report as 
select orders.id,orders.final_cost,payment.checkout_amount,users.user_name,users.email from payment,orders,users 
WHERE (payment.payment_id BETWEEN '2017-10-15 ' AND '2017-11-15');


DELIMITER $$

