

DELIMITER $$

DROP PROCEDURE IF EXISTS payment_call $$

CREATE PROCEDURE payment_call(IN ids int, IN paymentType varchar(20),IN userId int)

BEGIN  

DECLARE total_sum  INTEGER;
DECLARE pay  INTEGER;
DECLARE discount_amount  INTEGER;
DECLARE discount  INTEGER;

DECLARE userIds INTEGER;
DECLARE colorIds INTEGER;
DECLARE productIds INTEGER;
DECLARE quant INTEGER;

DECLARE roll_back INTEGER DEFAULT 0;
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET roll_back = 1;

DECLARE done INTEGER default 0;
DECLARE shift CURSOR FOR SELECT user_id,color_id,product_id,product_quantity FROM carts where user_id=ids;

DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;



start transaction;


select sum(carts.product_quantity * variants.price) into total_sum from carts,variants where carts.color_id = variants.id and carts.user_id = userId;



set discount = 10;

set discount_amount = ((discount/100)*total_sum);



set pay = (total_sum - discount_amount);

select discount_amount,pay,total_sum;

insert into orders
(id,order_date,shipping_date,order_status,final_cost,user_id,created)
values
(ids,curDate(),curDate(),"placed",total_sum,userId,curDate());

insert into payment(id,payment_type,discount_coupon,user_id,payment_date,checkout_amount,order_id,payment_status,created) values
(ids,paymentType,discount,userId,curDate(),pay,ids,"paid",curDate());


OPEN shift;
read_loop: LOOP
FETCH shift INTO userIds,colorIds, productIds,quant   ;

IF done THEN
     LEAVE read_loop;
END IF;

INSERT INTO order_history(user_id,color_id,product_id,product_quantity,created) VALUES (userIds,colorIds,productIds,quant,curDate());

select stock into quant_check from variants where color_id=colorIds;
set quant_check = (quant_check - quant);

if quant_check<0 then
set roll_back =1;
end if;

update stock set  stock = quant_check where color_id=colorIds;
	
END LOOP;
CLOSE shift;
delete from carts where user_id=userId;





if roll_back then
    select roll_back;
    rollback;
   
else
    select roll_back;	
    commit;
end if;

END$$




call payment_call(1,"COD",2)$$




















































CREATE DEFINER=`root`@`localhost` PROCEDURE `payment_call`(IN ids int ,IN orderId int,IN paymentType varchar(20),IN discountCoupon int,IN paymentDate date, IN paymentStatus varchar(20),IN Created date)
BEGIN  

DECLARE userId INTEGER;
DECLARE orderIds INTEGER;
DECLARE colorId INTEGER;
DECLARE productId INTEGER;
DECLARE quant INTEGER;

DECLARE roll_back INTEGER DEFAULT 0;
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET roll_back = 1;

start transaction;

insert into payment(id,order_id,payment_type,discount_coupon,payment_date,payment_status,created) values(ids,orderId,paymentType,discountCoupon,paymentDate,paymentStatus,Created);

call cost_setter();

select carts.user_id,carts.order_id,carts.color_id,carts.product_id,carts.product_quantity into 
userId,orderIds,colorId,productId,quant from carts where order_id=orderId;

delete from carts where carts.order_id = orderId;
 
insert into order_history (user_id,order_id,color_id,product_id,product_quantity) values 
(userId,orderIds,colorId,productId,quant);

if roll_back then
    select(roll_back);
    rollback;
   
else

    select(roll_back);
    commit;
end if;

END ;;
DELIMITER ;













DROP PROCEDURE IF EXISTS payment_call1 $$

CREATE PROCEDURE payment_call1(IN ids int, IN paymentType varchar(20), IN discountCoupon int,IN userId int)

BEGIN  

DECLARE total_sum  INTEGER;
DECLARE pay  INTEGER;
DECLARE discount_amount  INTEGER;
DECLARE discount  INTEGER;

DECLARE roll_back INTEGER DEFAULT 0;
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET roll_back = 1;

start transaction;


select sum(carts.product_quantity * variants.price) into total_sum from carts,variants where carts.color_id = variants.id and carts.user_id = userId;





set discount = 10;

set discount_amount = ((discount/100)*total_sum);



set pay = (total_sum - discount_amount);

select discount_amount,pay;

insert into payment(id,payment_type,discount_coupon,user_id,payment_date,checkout_amount,order_id,payment_status,created) values(ids,paymentType,discountCoupon,userId,curDate(),pay,ids,"paid",curDate());

if roll_back then
    select roll_back;
    rollback;
   
else
    select roll_back;	
    commit;
end if;

END$$



delete from payment$$

call payment_call1(1,"COD",10,2)$$




























DROP PROCEDURE IF EXISTS cost_setter $$
CREATE PROCEDURE cost_setter()

BEGIN

DECLARE total_sum  INTEGER;
DECLARE order_count INTEGER;
DECLARE itr INTEGER;
DECLARE discount INTEGER;
DECLARE pay INTEGER; 
DECLARE discount_amout INTEGER;

set order_count = (select count(*) from orders);
set itr=1;

while(itr <= order_count) do

select sum(carts.product_quantity * variants.price) into total_sum from carts,variants where carts.color_id = variants.id and carts.user_id = itr;

update orders set final_cost = total_sum where id = itr;

 


set discount = (select discount_coupon from payment where id=itr);

set discount_amout = ((discount/100)*total_sum);


select total_sum,discount_amout ;
set pay=(total_sum - discount_amout);
select pay,itr;
update payment set checkout_amount = pay where order_id =  itr   ;


set itr=itr+1; 
END WHILE ;

END$$



DROP PROCEDURE IF EXISTS cost_setter $$
CREATE PROCEDURE cost_setter()

BEGIN

DECLARE total_sum  INTEGER;
DECLARE order_count INTEGER;
DECLARE itr INTEGER;
DECLARE discount INTEGER;
DECLARE pay INTEGER; 
DECLARE discount_amout INTEGER;

set order_count = (select count(*) from orders);
set itr=1;

while(itr <= order_count) do

select sum(carts.product_quantity * variants.price) into total_sum from carts,variants where carts.color_id = variants.id and carts.user_id = itr;

update orders set final_cost = total_sum where id = itr;

 

set discount = (select discount_coupon from payment where id=itr);

set discount_amout = ((discount/100)*total_sum);


select total_sum,discount_amout ;
set pay=(total_sum - discount_amout);
select pay,itr;
update payment set checkout_amount = pay where order_id =  itr   ;


set itr=itr+1; 
END WHILE ;

END$$







create view order_detail as 
select orders.id,orders.final_cost,payment.checkout_amount,payment.payment_type,payment.payment_status from payment left join orders on orders.id=payment.order_id;


DELIMITER $$


create view monthly_report as 
select orders.id,orders.final_cost,payment.checkout_amount,users.user_name,users.email from payment,orders,users 
WHERE (payment.payment_id BETWEEN '2017-10-15 ' AND '2017-11-15');


DELIMITER $$

